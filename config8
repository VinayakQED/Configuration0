# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, lib, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      <nixos-hardware/lenovo/thinkpad/p52>
 
  "${builtins.fetchGit { url = "https://github.com/NixOS/nixos-hardware.git"; }}/lenovo/thinkpad/p52"

 ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Asia/Kolkata";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_IN";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_IN";
    LC_IDENTIFICATION = "en_IN";
    LC_MEASUREMENT = "en_IN";
    LC_MONETARY = "en_IN";
    LC_NAME = "en_IN";
    LC_NUMERIC = "en_IN";
    LC_PAPER = "en_IN";
    LC_TELEPHONE = "en_IN";
    LC_TIME = "en_IN";
  };

  # Enable the X11 windowing system.
  # You can disable this if you're only using the Wayland session.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.displayManager.sddm.enable = true;
  services.desktopManager.plasma6.enable = true;

  # Enable hyprland tiling window manager
  programs.hyprland.enable = true;

  # Enable Cinnamon Desktop Environment.
#   services.xserver.desktopManager.cinnamon.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.vinayak = {
    isNormalUser = true;
    description = "vinayak";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      kdePackages.kate
    # RustDesk Remote Client and Server
      pkgs.rustdesk
      pkgs.rustdesk-server
    # Download manager and torrent
      pkgs.varia
    # Encryption
      pkgs.veracrypt
    #  pkgs.cryptomator
    # Ollama for local LLM 'AI'
     # pkgs.ollama
      pkgs.ollama-cuda
    ];
  };

  # Install firefox.
  programs.firefox.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;


  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    pkgs.wget
	pkgs.vim
	pkgs.neovim
	pkgs.tmux
	pkgs.htop
	pkgs.tlp
    pkgs.auto-cpufreq
	pkgs.tpacpi-bat
	pkgs.git
	pkgs.proton-pass
	pkgs.vlc
	pkgs.libreoffice-qt6-fresh
	pkgs.gparted
	pkgs.persepolis
	pkgs.flatpak
	pkgs.appimagekit
	pkgs.fastfetch
	#pkgs.virtualbox
	#pkgs.linuxKernel.packages.linux_zen.virtualbox
	#pkgs.virtualboxWithExtpack
	#pkgs.virtualboxKvm
	#pkgs.virtualboxHeadless
	#pkgs.virtualboxHardened
	#pkgs.linuxKernel.packages.linux_lqx.virtualbox
	#pkgs.linuxKernel.packages.linux_libre.virtualbox
	#pkgs.linuxKernel.packages.linux_zen.virtualboxGuestAdditions
	#pkgs.linuxKernel.packages.linux_xanmod_stable.virtualbox
	pkgs.waydroid
	pkgs.wl-clipboard
	pkgs.bottles
	pkgs.wine
	pkgs.qemu
	pkgs.vmware-workstation
	pkgs.docker
    pkgs.podman
	pkgs.timeshift
	pkgs.btop-rocm
	pkgs.btop
	#pkgs.haskellPackages.utf
	#pkgs.perl540Packages.PerlIOutf8_strict
    pkgs.xdg-utils
    pkgs.python3Full
	pkgs.gcc
	pkgs.gdb
	pkgs.clang
	#pkgs.g++
	pkgs.codeblocksFull
	pkgs.codeblocks
	pkgs.gnome-terminal
	pkgs.ncdu
	pkgs.nvtopPackages.nvidia
	pkgs.lshw
	#pkgs.veracrypt
	pkgs.fzf
	pkgs.fwupd
	pkgs.fwupd-efi
	pkgs.libsForQt5.kdenlive
	pkgs.kdePackages.kdenlive
	pkgs.openshot-qt
	pkgs.flowblade
	pkgs.blender
	pkgs.lightworks
	pkgs.pciutils
 # Nvidia 
    pkgs.cudaPackages.cuda_nvcc
    pkgs.rocmPackages.hipcc
	pkgs.driversi686Linux.mesa-demos
	pkgs.bleachbit
	pkgs.glmark2
	pkgs.mesa-demos
	pkgs.gpustat
	pkgs.python312Packages.gpustat
	#pkgs.gimp
	pkgs.gimp-with-plugins
	pkgs.calibre
	pkgs.calibre-web
	#pkgs.Restic 
	#pkgs.nvidia-system-monitor-qt
	pkgs.tor-browser
	pkgs.kitty
	#pkgs.gnome-tweaks
	pkgs.geany
	pkgs.geany-with-vte
	pkgs.axel
	pkgs.tldr
	#pkgs.tldc
	pkgs.tealdeer
	#pkgs.lsd
	pkgs.bat
	pkgs.entr
	pkgs.librewolf
	#pkgs.libvirt
	pkgs.virt-manager
	pkgs.openssh
	pkgs.libsForQt5.kdeconnect-kde
	#pkgs.gnomeExtensions.gsconnect
	pkgs.vscodium
	#pkgs.urbackup-client
	pkgs.stacer
	pkgs.notepadqq
	pkgs.notesnook
	#pkgs.gnomeExtentions.forge
	#pkgs.gnomeExtensions.logo-menu
	#pkgs.gnomeExtensions.app-menu-back
	pkgs.eza
	pkgs.nerdfonts
	pkgs.waybar
	#pkgs.swaybg
	pkgs.wofi
	#pkgs.hyprpaper
	pkgs.font-awesome
	pkgs.hyprshot
	pkgs.swaynotificationcenter
	pkgs.libnotify
	pkgs.hyprlock
	pkgs.joplin
	pkgs.joplin-desktop
	#pkgs
	#pkgs
	#pkgs

  ];
    # Enale Nix Flakes
    
    nix.settings.experimental-features = [ "nix-command" "flakes" ];


        # Enable Virtualisation

	#virtualisation.virtualbox.host.enable = true;
	#users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];
	#virtualisation.virtualbox.host.enableExtensionPack = true;
	#virtualisation.virtualbox.guest.enable = true;
  	#virtualisation.virtualbox.guest.dragAndDrop = true;
    
	virtualisation.vmware.host.enable = true;
	virtualisation.libvirtd.enable = true;
	virtualisation.waydroid.enable = true;
	virtualisation.podman.enable = true;
    virtualisation.docker.enable = true;
	# Running AI with Ollama 

	services.ollama.enable = true;

       # Enable Flatpak
	services.flatpak.enable = true;


	services.throttled.enable = lib.mkDefault true;

    Nvidia

# hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.production; 

# virtualisation.docker.enableNvidia = true;

# virtualisation.podman.enableNvidia = true;

# services.ollama.acceleration

# hardware.nvidia.prime.nvidiaBusId = "PCI:1:0:0";

# hardware.nvidia.prime.intelBusId = "PCI:0:2:0";

# hardware.nvidia.open = true;

# hardware.nvidiaOptimus.disable = false;

# hardware.nvidia.modesetting.enable = true;

# hardware.nvidia.prime.offload.enable = true;

# hardware.nvidia.prime.offload.enableOffloadCmd = true;

# services.xserver.videoDrivers = ["nvidia"];

# programs.nix-required-mounts.presents.nvidia-gpu.enable = true;




# Configuring Nvidia PRIME
#  hardware.nvidia.nvidiaSettings = true;
#  services.xserver.videoDrivers = ["nvidia"];
#  hardware.opengl.enable = true;
#  hardware.nvidia.modesetting.enable = true;
#  hardware.nvidia.prime = {
#   offload.enable = true;

   # Bus ID of the NVIDIA GPU. You can find it using lspci, either under 3D or VGA
#   nvidiaBusId = "PCI:1:0:0";

   # Bus ID of the Intel GPU. You can find it using lspci, either under 3D or VGA
#   intelBusId = "PCI:0:2:0";
#  };
#  hardware.opengl.driSupport32Bit = true;
#  hardware.nvidia.powerManagement.enable = true;
  
  # Optionally, you may need to select the appropriate driver version for your specific GPU.
#  hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.production;



#  { pkgs, ... }:

#  {
#  hardware.graphics = {
#    enable = true;
#    enable32Bit = true;
#  };
  # hardware.opengl has beed changed to hardware.graphics

#  services.xserver.videoDrivers = ["nvidia"];
  # services.xserver.videoDrivers = ["amdgpu"];

#  hardware.nvidia.modesetting.enable = true;


#  hardware.nvidia.prime = {
#    offload = {
#      enable = true;
#      enableOffloadCmd = true;
#    };

    # integrated
#     intelBusId = "PCI:0:2:0";
   # amdgpuBusId = "PCI:6:0:0"
    
    # dedicated
#    nvidiaBusId = "PCI:1:0:0";
#  };

#  specialisation = {
#    gaming-time.configuration = {

#      hardware.nvidia = {
#        prime.sync.enable = lib.mkForce true;
#        prime.offload = {
#          enable = lib.mkForce false;
#          enableOffloadCmd = lib.mkForce false;
#        };
#      };

#    };
#  };
#}

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
    services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?

}
